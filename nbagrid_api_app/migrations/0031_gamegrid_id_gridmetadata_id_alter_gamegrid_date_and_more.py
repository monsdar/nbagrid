# Generated by Django 5.2 on 2025-09-21 11:42, modified to handle existing id columns

from django.db import migrations, models


def check_and_alter_fields(apps, schema_editor):
    """Check if id columns exist and handle accordingly"""
    connection = schema_editor.connection
    
    # Check if id columns exist
    gridmetadata_has_id = False
    gamegrid_has_id = False
    
    with connection.cursor() as cursor:
        if connection.vendor == 'postgresql':
            # PostgreSQL uses information_schema
            cursor.execute("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'nbagrid_api_app_gridmetadata' 
                AND column_name = 'id'
            """)
            gridmetadata_has_id = cursor.fetchone() is not None
            
            cursor.execute("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'nbagrid_api_app_gamegrid' 
                AND column_name = 'id'
            """)
            gamegrid_has_id = cursor.fetchone() is not None
        else:
            # SQLite uses pragma table_info
            cursor.execute("PRAGMA table_info(nbagrid_api_app_gridmetadata)")
            gridmetadata_columns = [row[1] for row in cursor.fetchall()]
            gridmetadata_has_id = 'id' in gridmetadata_columns
            
            cursor.execute("PRAGMA table_info(nbagrid_api_app_gamegrid)")
            gamegrid_columns = [row[1] for row in cursor.fetchall()]
            gamegrid_has_id = 'id' in gamegrid_columns
    
    # If id columns don't exist, add them
    if not gridmetadata_has_id:
        if connection.vendor == 'postgresql':
            schema_editor.execute("ALTER TABLE nbagrid_api_app_gridmetadata ADD COLUMN id SERIAL PRIMARY KEY")
        else:
            schema_editor.execute("ALTER TABLE nbagrid_api_app_gridmetadata ADD COLUMN id INTEGER PRIMARY KEY AUTOINCREMENT")
    
    if not gamegrid_has_id:
        if connection.vendor == 'postgresql':
            schema_editor.execute("ALTER TABLE nbagrid_api_app_gamegrid ADD COLUMN id SERIAL PRIMARY KEY")
        else:
            schema_editor.execute("ALTER TABLE nbagrid_api_app_gamegrid ADD COLUMN id INTEGER PRIMARY KEY AUTOINCREMENT")


def reverse_alter_fields(apps, schema_editor):
    """Reverse the field alterations"""
    # This is a no-op since we don't want to remove the id columns
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('nbagrid_api_app', '0030_change_primary_keys'),
    ]

    operations = [
        # Use RunPython to conditionally add id fields only if they don't exist
        migrations.RunPython(
            check_and_alter_fields,
            reverse_alter_fields,
        ),
        # These AlterField operations will work regardless of whether id columns existed before
        migrations.AlterField(
            model_name='gamegrid',
            name='date',
            field=models.DateField(unique=True),
        ),
        migrations.AlterField(
            model_name='gridmetadata',
            name='date',
            field=models.DateField(unique=True),
        ),
    ]
