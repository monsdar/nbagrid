# Generated by Django 5.2 on 2025-09-21 11:51, modified to handle existing id columns

from django.db import migrations, models


def ensure_id_fields_exist(apps, schema_editor):
    """Ensure id fields exist and are properly configured as primary keys"""
    connection = schema_editor.connection
    
    with connection.cursor() as cursor:
        if connection.vendor == 'postgresql':
            # Check if id columns exist and their current state
            cursor.execute("""
                SELECT column_name, data_type, is_nullable
                FROM information_schema.columns 
                WHERE table_name = 'nbagrid_api_app_gridmetadata' 
                AND column_name = 'id'
            """)
            gridmetadata_id_info = cursor.fetchone()
            
            cursor.execute("""
                SELECT column_name, data_type, is_nullable
                FROM information_schema.columns 
                WHERE table_name = 'nbagrid_api_app_gamegrid' 
                AND column_name = 'id'
            """)
            gamegrid_id_info = cursor.fetchone()
            
            # Check current primary key constraints
            cursor.execute("""
                SELECT column_name 
                FROM information_schema.key_column_usage 
                WHERE table_name = 'nbagrid_api_app_gridmetadata' 
                AND constraint_name IN (
                    SELECT constraint_name 
                    FROM information_schema.table_constraints 
                    WHERE table_name = 'nbagrid_api_app_gridmetadata' 
                    AND constraint_type = 'PRIMARY KEY'
                )
            """)
            gridmetadata_pk = cursor.fetchone()
            
            cursor.execute("""
                SELECT column_name 
                FROM information_schema.key_column_usage 
                WHERE table_name = 'nbagrid_api_app_gamegrid' 
                AND constraint_name IN (
                    SELECT constraint_name 
                    FROM information_schema.table_constraints 
                    WHERE table_name = 'nbagrid_api_app_gamegrid' 
                    AND constraint_type = 'PRIMARY KEY'
                )
            """)
            gamegrid_pk = cursor.fetchone()
            
            print(f"GridMetadata id info: {gridmetadata_id_info}")
            print(f"GameGrid id info: {gamegrid_id_info}")
            print(f"GridMetadata primary key: {gridmetadata_pk}")
            print(f"GameGrid primary key: {gamegrid_pk}")
            
            # Handle GridMetadata
            if gridmetadata_id_info is None:
                # Column doesn't exist, add it
                cursor.execute("ALTER TABLE nbagrid_api_app_gridmetadata ADD COLUMN id SERIAL PRIMARY KEY")
                print("Added id column to GridMetadata table")
            elif gridmetadata_pk is None:
                # Column exists but no primary key constraint
                cursor.execute("ALTER TABLE nbagrid_api_app_gridmetadata ADD PRIMARY KEY (id)")
                print("Added primary key constraint to GridMetadata id column")
            else:
                print("GridMetadata id column already exists with primary key")
                
            # Handle GameGrid
            if gamegrid_id_info is None:
                # Column doesn't exist, add it
                cursor.execute("ALTER TABLE nbagrid_api_app_gamegrid ADD COLUMN id SERIAL PRIMARY KEY")
                print("Added id column to GameGrid table")
            elif gamegrid_pk is None:
                # Column exists but no primary key constraint
                cursor.execute("ALTER TABLE nbagrid_api_app_gamegrid ADD PRIMARY KEY (id)")
                print("Added primary key constraint to GameGrid id column")
            else:
                print("GameGrid id column already exists with primary key")
                
        else:
            # SQLite handling
            cursor.execute("PRAGMA table_info(nbagrid_api_app_gridmetadata)")
            gridmetadata_columns = [row[1] for row in cursor.fetchall()]
            gridmetadata_has_id = 'id' in gridmetadata_columns
            
            cursor.execute("PRAGMA table_info(nbagrid_api_app_gamegrid)")
            gamegrid_columns = [row[1] for row in cursor.fetchall()]
            gamegrid_has_id = 'id' in gamegrid_columns
            
            if not gridmetadata_has_id:
                cursor.execute("ALTER TABLE nbagrid_api_app_gridmetadata ADD COLUMN id INTEGER PRIMARY KEY AUTOINCREMENT")
                print("Added id column to GridMetadata table")
            else:
                print("GridMetadata id column already exists")
                
            if not gamegrid_has_id:
                cursor.execute("ALTER TABLE nbagrid_api_app_gamegrid ADD COLUMN id INTEGER PRIMARY KEY AUTOINCREMENT")
                print("Added id column to GameGrid table")
            else:
                print("GameGrid id column already exists")


def reverse_ensure_id_fields(apps, schema_editor):
    """Reverse the id field addition - this is a no-op since we don't want to remove id columns"""
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('nbagrid_api_app', '0032_fix_duplicate_id_columns'),
    ]

    operations = [
        # Use RunPython to handle the database schema changes safely
        migrations.RunPython(
            ensure_id_fields_exist,
            reverse_ensure_id_fields,
        ),
        # Use RunSQL with state_operations to tell Django about the fields
        # The SQL will be no-ops since we handle everything in the Python function above
        migrations.RunSQL(
            sql=["SELECT 1;"],  # No-op SQL
            reverse_sql=["SELECT 1;"],
            state_operations=[
                # These operations tell Django's migration system about the fields
                migrations.AddField(
                    model_name='gamegrid',
                    name='id',
                    field=models.AutoField(primary_key=True, serialize=False),
                ),
                migrations.AddField(
                    model_name='gridmetadata',
                    name='id',
                    field=models.AutoField(primary_key=True, serialize=False),
                ),
            ],
        ),
    ]
