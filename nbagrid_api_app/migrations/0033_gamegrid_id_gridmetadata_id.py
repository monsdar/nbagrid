# Generated by Django 5.2 on 2025-09-21 11:51, modified to handle existing id columns

from django.db import migrations, models


def ensure_id_fields_exist(apps, schema_editor):
    """Ensure id fields exist and are properly configured"""
    connection = schema_editor.connection
    
    with connection.cursor() as cursor:
        if connection.vendor == 'postgresql':
            # Check if id columns exist
            cursor.execute("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'nbagrid_api_app_gridmetadata' 
                AND column_name = 'id'
            """)
            gridmetadata_has_id = cursor.fetchone() is not None
            
            cursor.execute("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'nbagrid_api_app_gamegrid' 
                AND column_name = 'id'
            """)
            gamegrid_has_id = cursor.fetchone() is not None
            
            # Add id columns if they don't exist
            if not gridmetadata_has_id:
                cursor.execute("ALTER TABLE nbagrid_api_app_gridmetadata ADD COLUMN id SERIAL PRIMARY KEY")
                print("Added id column to GridMetadata table")
            else:
                print("GridMetadata id column already exists")
                
            if not gamegrid_has_id:
                cursor.execute("ALTER TABLE nbagrid_api_app_gamegrid ADD COLUMN id SERIAL PRIMARY KEY")
                print("Added id column to GameGrid table")
            else:
                print("GameGrid id column already exists")
                
        else:
            # SQLite handling
            cursor.execute("PRAGMA table_info(nbagrid_api_app_gridmetadata)")
            gridmetadata_columns = [row[1] for row in cursor.fetchall()]
            gridmetadata_has_id = 'id' in gridmetadata_columns
            
            cursor.execute("PRAGMA table_info(nbagrid_api_app_gamegrid)")
            gamegrid_columns = [row[1] for row in cursor.fetchall()]
            gamegrid_has_id = 'id' in gamegrid_columns
            
            if not gridmetadata_has_id:
                cursor.execute("ALTER TABLE nbagrid_api_app_gridmetadata ADD COLUMN id INTEGER PRIMARY KEY AUTOINCREMENT")
                print("Added id column to GridMetadata table")
            else:
                print("GridMetadata id column already exists")
                
            if not gamegrid_has_id:
                cursor.execute("ALTER TABLE nbagrid_api_app_gamegrid ADD COLUMN id INTEGER PRIMARY KEY AUTOINCREMENT")
                print("Added id column to GameGrid table")
            else:
                print("GameGrid id column already exists")


def reverse_ensure_id_fields(apps, schema_editor):
    """Reverse the id field addition - this is a no-op since we don't want to remove id columns"""
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('nbagrid_api_app', '0032_fix_duplicate_id_columns'),
    ]

    operations = [
        # Use RunPython to handle the database schema changes safely
        migrations.RunPython(
            ensure_id_fields_exist,
            reverse_ensure_id_fields,
        ),
        # Tell Django's migration system about the fields
        # These operations will be no-ops in the database since the fields already exist
        migrations.AddField(
            model_name='gamegrid',
            name='id',
            field=models.AutoField(primary_key=True, serialize=False),
        ),
        migrations.AddField(
            model_name='gridmetadata',
            name='id',
            field=models.AutoField(primary_key=True, serialize=False),
        ),
    ]
