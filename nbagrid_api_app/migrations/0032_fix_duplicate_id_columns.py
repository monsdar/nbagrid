# Generated by Django 5.2 on 2025-09-21 11:49
# Migration to fix duplicate id column issues in production

from django.db import migrations


def fix_duplicate_id_columns(apps, schema_editor):
    """
    Fix any duplicate id columns that might exist due to migration issues.
    This migration handles the case where id columns were added multiple times.
    """
    connection = schema_editor.connection
    
    with connection.cursor() as cursor:
        if connection.vendor == 'postgresql':
            # Check for duplicate id columns in GridMetadata
            cursor.execute("""
                SELECT column_name, data_type, is_nullable
                FROM information_schema.columns 
                WHERE table_name = 'nbagrid_api_app_gridmetadata' 
                AND column_name LIKE '%id%'
                ORDER BY column_name
            """)
            gridmetadata_columns = cursor.fetchall()
            
            # Check for duplicate id columns in GameGrid
            cursor.execute("""
                SELECT column_name, data_type, is_nullable
                FROM information_schema.columns 
                WHERE table_name = 'nbagrid_api_app_gamegrid' 
                AND column_name LIKE '%id%'
                ORDER BY column_name
            """)
            gamegrid_columns = cursor.fetchall()
            
            # Log what we found (for debugging)
            print(f"GridMetadata columns: {gridmetadata_columns}")
            print(f"GameGrid columns: {gamegrid_columns}")
            
            # Check if we have multiple id columns (this would indicate a problem)
            gridmetadata_id_count = len([col for col in gridmetadata_columns if col[0] == 'id'])
            gamegrid_id_count = len([col for col in gamegrid_columns if col[0] == 'id'])
            
            if gridmetadata_id_count > 1:
                print("WARNING: Multiple id columns found in GridMetadata table")
            if gamegrid_id_count > 1:
                print("WARNING: Multiple id columns found in GameGrid table")
            
            # Ensure primary key constraints are correct
            # Check if id is the primary key for GridMetadata
            cursor.execute("""
                SELECT column_name 
                FROM information_schema.key_column_usage 
                WHERE table_name = 'nbagrid_api_app_gridmetadata' 
                AND constraint_name IN (
                    SELECT constraint_name 
                    FROM information_schema.table_constraints 
                    WHERE table_name = 'nbagrid_api_app_gridmetadata' 
                    AND constraint_type = 'PRIMARY KEY'
                )
            """)
            gridmetadata_pk = cursor.fetchone()
            
            # Check if id is the primary key for GameGrid
            cursor.execute("""
                SELECT column_name 
                FROM information_schema.key_column_usage 
                WHERE table_name = 'nbagrid_api_app_gamegrid' 
                AND constraint_name IN (
                    SELECT constraint_name 
                    FROM information_schema.table_constraints 
                    WHERE table_name = 'nbagrid_api_app_gamegrid' 
                    AND constraint_type = 'PRIMARY KEY'
                )
            """)
            gamegrid_pk = cursor.fetchone()
            
            print(f"GridMetadata primary key: {gridmetadata_pk}")
            print(f"GameGrid primary key: {gamegrid_pk}")
            
            # If date is still the primary key, we need to fix it
            if gridmetadata_pk and gridmetadata_pk[0] == 'date':
                print("Fixing GridMetadata primary key...")
                try:
                    cursor.execute("ALTER TABLE nbagrid_api_app_gridmetadata DROP CONSTRAINT nbagrid_api_app_gridmetadata_pkey")
                    cursor.execute("ALTER TABLE nbagrid_api_app_gridmetadata ADD PRIMARY KEY (id)")
                    cursor.execute("ALTER TABLE nbagrid_api_app_gridmetadata ADD CONSTRAINT nbagrid_api_app_gridmetadata_date_unique UNIQUE (date)")
                    print("GridMetadata primary key fixed successfully")
                except Exception as e:
                    print(f"Error fixing GridMetadata primary key: {e}")
            
            if gamegrid_pk and gamegrid_pk[0] == 'date':
                print("Fixing GameGrid primary key...")
                try:
                    cursor.execute("ALTER TABLE nbagrid_api_app_gamegrid DROP CONSTRAINT nbagrid_api_app_gamegrid_pkey")
                    cursor.execute("ALTER TABLE nbagrid_api_app_gamegrid ADD PRIMARY KEY (id)")
                    cursor.execute("ALTER TABLE nbagrid_api_app_gamegrid ADD CONSTRAINT nbagrid_api_app_gamegrid_date_unique UNIQUE (date)")
                    print("GameGrid primary key fixed successfully")
                except Exception as e:
                    print(f"Error fixing GameGrid primary key: {e}")
                    
        else:
            # SQLite handling
            cursor.execute("PRAGMA table_info(nbagrid_api_app_gridmetadata)")
            gridmetadata_columns = cursor.fetchall()
            gridmetadata_has_id = any(col[1] == 'id' for col in gridmetadata_columns)
            
            cursor.execute("PRAGMA table_info(nbagrid_api_app_gamegrid)")
            gamegrid_columns = cursor.fetchall()
            gamegrid_has_id = any(col[1] == 'id' for col in gamegrid_columns)
            
            print(f"GridMetadata has id column: {gridmetadata_has_id}")
            print(f"GameGrid has id column: {gamegrid_has_id}")


def reverse_fix_duplicate_id_columns(apps, schema_editor):
    """Reverse the fix - this is a no-op since we don't want to undo the fixes"""
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('nbagrid_api_app', '0031_gamegrid_id_gridmetadata_id_alter_gamegrid_date_and_more'),
    ]

    operations = [
        migrations.RunPython(
            fix_duplicate_id_columns,
            reverse_fix_duplicate_id_columns,
        ),
    ]
