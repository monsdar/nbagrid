#!/usr/bin/env python3
"""
Script to upload all generated grids from .grids/ directory using the upload_prebuilt_game API endpoint.

This script reads all JSON grid files generated by generate_grids.py and uploads them to the database
via the Django Ninja API endpoint. Grids without dates will be assigned to the first available date.

Usage:
    python upload_grids.py [--api-url API_URL] [--api-key API_KEY] [--grids-dir GRIDS_DIR] [--force] [--dry-run]

Environment variables:
    NBAGRID_API_URL: Base URL for the API (default: http://localhost:8000)
    NBAGRID_API_KEY: API key for authentication (default: supersecret)
"""

import argparse
import json
import os
import sys
import time
from pathlib import Path
from typing import Dict, Any, Optional
import requests
from urllib.parse import urljoin


class GridUploader:
    """Uploads generated grids to the NBA Grid API"""
    
    def __init__(self, api_url: str, api_key: str, dry_run: bool = False):
        self.api_url = api_url.rstrip('/')
        self.api_key = api_key
        self.dry_run = dry_run
        self.session = requests.Session()
        self.session.headers.update({
            'X-API-Key': self.api_key,
            'Content-Type': 'application/json'
        })
        
    def upload_grid(self, grid_file_path: Path, force: bool = False) -> Dict[str, Any]:
        """Upload a single grid file to the API"""
        
        try:
            # Read and parse the grid file
            with open(grid_file_path, 'r') as f:
                grid_data = json.load(f)
            
            # Extract grid information
            grid_number = grid_data.get('grid_number', 'unknown')
            quality_score = grid_data.get('quality_score', 0.0)
            filters = grid_data.get('filters', {})
            
            # Prepare the upload payload
            payload = {
                'filters': filters,
                'game_title': f"Pre-generated Grid #{grid_number} (Quality: {quality_score:.3f})",
                'force': force
            }
            
            # Add date if present in the grid file
            if 'date' in grid_data:
                date_info = grid_data['date']
                payload.update({
                    'year': date_info.get('year'),
                    'month': date_info.get('month'),
                    'day': date_info.get('day')
                })
            
            if self.dry_run:
                print(f"[DRY RUN] Would upload {grid_file_path.name}:")
                print(f"  Grid #{grid_number}, Quality: {quality_score:.3f}")
                print(f"  Payload: {json.dumps(payload, indent=2)}")
                return {'status': 'dry_run', 'message': 'Dry run mode'}
            
            # Make the API request
            url = urljoin(self.api_url, '/api/upload_prebuilt_game')
            response = self.session.post(url, json=payload)
            
            if response.status_code == 200:
                result = response.json()
                print(f"✓ Successfully uploaded {grid_file_path.name}: {result.get('message', 'Upload successful')}")
                return result
            else:
                error_msg = f"Failed to upload {grid_file_path.name}: HTTP {response.status_code}"
                try:
                    error_data = response.json()
                    if 'message' in error_data:
                        error_msg += f" - {error_data['message']}"
                except:
                    error_msg += f" - {response.text}"
                
                print(f"✗ {error_msg}")
                return {'status': 'error', 'message': error_msg, 'status_code': response.status_code}
                
        except Exception as e:
            error_msg = f"Error processing {grid_file_path.name}: {str(e)}"
            print(f"✗ {error_msg}")
            return {'status': 'error', 'message': error_msg}
    
    def upload_all_grids(self, grids_dir: str, force: bool = False) -> Dict[str, Any]:
        """Upload all grid files from the specified directory"""
        
        grids_path = Path(grids_dir)
        if not grids_path.exists():
            return {'status': 'error', 'message': f"Grids directory does not exist: {grids_dir}"}
        
        if not grids_path.is_dir():
            return {'status': 'error', 'message': f"Path is not a directory: {grids_dir}"}
        
        # Find all JSON grid files
        grid_files = list(grids_path.glob('grid_*.json'))
        if not grid_files:
            return {'status': 'error', 'message': f"No grid files found in {grids_dir}"}
        
        print(f"Found {len(grid_files)} grid files in {grids_dir}")
        print(f"API URL: {self.api_url}")
        print(f"Force overwrite: {force}")
        print(f"Dry run: {self.dry_run}")
        print("-" * 60)
        
        # Sort files by grid number for consistent ordering
        grid_files.sort(key=lambda f: self._extract_grid_number(f.name))
        
        # Upload each grid
        results = {
            'total': len(grid_files),
            'successful': 0,
            'failed': 0,
            'details': []
        }
        
        for i, grid_file in enumerate(grid_files, 1):
            print(f"\n[{i}/{len(grid_files)}] Processing {grid_file.name}...")
            
            result = self.upload_grid(grid_file, force)
            results['details'].append({
                'file': grid_file.name,
                'result': result
            })
            
            if result.get('status') == 'success':
                results['successful'] += 1
            else:
                results['failed'] += 1
            
            # Add a small delay between uploads to be respectful to the API
            if not self.dry_run and i < len(grid_files):
                time.sleep(0.5)
        
        # Print summary
        print("\n" + "=" * 60)
        print("UPLOAD SUMMARY")
        print("=" * 60)
        print(f"Total grids: {results['total']}")
        print(f"Successful: {results['successful']}")
        print(f"Failed: {results['failed']}")
        
        if results['failed'] > 0:
            print(f"\nFailed uploads:")
            for detail in results['details']:
                if detail['result'].get('status') != 'success':
                    print(f"  - {detail['file']}: {detail['result'].get('message', 'Unknown error')}")
        
        return results
    
    def _extract_grid_number(self, filename: str) -> int:
        """Extract grid number from filename for sorting"""
        try:
            # Handle both formats: grid_001.json and grid_20250101_001.json
            if '_' in filename and filename.count('_') >= 2:
                # Format: grid_20250101_001.json
                parts = filename.split('_')
                return int(parts[-1].replace('.json', ''))
            else:
                # Format: grid_001.json
                return int(filename.replace('grid_', '').replace('.json', ''))
        except:
            return 0


def main():
    parser = argparse.ArgumentParser(
        description='Upload generated grids to the NBA Grid API',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  # Upload all grids with default settings
  python upload_grids.py
  
  # Upload with custom API URL and key
  python upload_grids.py --api-url http://localhost:8000 --api-key mykey
  
  # Dry run to see what would be uploaded
  python upload_grids.py --dry-run
  
  # Force overwrite existing grids
  python upload_grids.py --force
  
  # Upload from custom grids directory
  python upload_grids.py --grids-dir ./my_grids
        """
    )
    
    parser.add_argument(
        '--api-url',
        default=os.environ.get('NBAGRID_API_URL', 'http://localhost:8000'),
        help='Base URL for the API (default: http://localhost:8000)'
    )
    
    parser.add_argument(
        '--api-key',
        default=os.environ.get('NBAGRID_API_KEY', 'supersecret'),
        help='API key for authentication (default: supersecret)'
    )
    
    parser.add_argument(
        '--grids-dir',
        default='.grids',
        help='Directory containing generated grid files (default: .grids)'
    )
    
    parser.add_argument(
        '--force',
        action='store_true',
        help='Force overwrite existing grids (only for future dates)'
    )
    
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='Show what would be uploaded without actually uploading'
    )
    
    args = parser.parse_args()
    
    # Validate arguments
    if not args.api_url:
        print("Error: API URL is required")
        sys.exit(1)
    
    if not args.api_key:
        print("Error: API key is required")
        sys.exit(1)
    
    # Create uploader and process grids
    try:
        uploader = GridUploader(args.api_url, args.api_key, args.dry_run)
        results = uploader.upload_all_grids(args.grids_dir, args.force)
        
        if results.get('status') == 'error':
            print(f"\nError: {results['message']}")
            sys.exit(1)
        
        # Exit with error code if any uploads failed
        if results['failed'] > 0:
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n\nUpload interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\nUnexpected error: {str(e)}")
        sys.exit(1)


if __name__ == '__main__':
    main()
